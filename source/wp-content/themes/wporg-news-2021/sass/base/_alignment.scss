//FRONTEND
.site-content-container {
	// In this situation we want to introduce a standardized gap between content and the edge of the screen.
	padding-top: var(--wp--custom--post-content--padding--top);
	padding-right: var(--wp--custom--post-content--padding--right);
	padding-bottom: var(--wp--custom--post-content--padding--bottom);
	padding-left: var(--wp--custom--post-content--padding--left);

	.alignfull {
		// These elements we want to "bust out" of the gap created above
		margin-left: calc(-1 * var(--wp--custom--post-content--padding--left)) !important;
		margin-right: calc(-1 * var(--wp--custom--post-content--padding--right)) !important;
		width: unset;

		// However any containers that "bust out" should re-apply that gap but this time using padding instead of margins.
		&.wp-block-template-part,
		&.wp-block-columns,
		&.wp-block-group {
			padding-left: var(--wp--custom--post-content--padding--left);
			padding-right: var(--wp--custom--post-content--padding--right);
		}
	}
}

@include break-tablet {
	.site-content-container {
		padding-top: var(--wp--custom--post-content--breakpoint--tablet--padding--top);
		padding-right: var(--wp--custom--post-content--breakpoint--tablet--padding--right);
		padding-bottom: var(--wp--custom--post-content--breakpoint--tablet--padding--bottom);
		padding-left: var(--wp--custom--post-content--breakpoint--tablet--padding--left);

		.alignfull {
			margin-left: calc(-1 * var(--wp--custom--post-content--breakpoint--tablet--padding--left)) !important;
			margin-right: calc(-1 * var(--wp--custom--post-content--breakpoint--tablet--padding--right)) !important;
		}
	}
}

// EDITOR (NOTE: It PROBABLY would be OK to bring these together to "simplify" the stylesheet.  However the selectors are quite different
// and it's a lot easier to understand and ensure intent separated in this way.
.is-root-container { // Top level of the editor.
	padding-left: var(--wp--custom--post-content--padding--left);
	padding-right: var(--wp--custom--post-content--padding--right);
	.wp-block[data-align="full"] { // Blocks configured to be "align full" in "editorspeak".
		margin-left: calc(-1 * var(--wp--custom--post-content--padding--left)) !important;
		margin-right: calc(-1 * var(--wp--custom--post-content--padding--right)) !important;
		width: unset;
		>.wp-block-group {
			padding-left: var(--wp--custom--post-content--padding--left);
			padding-right: var(--wp--custom--post-content--padding--right);
		}
	}
}

@include break-mobile {
	// limit size of any element that is aligned left/right
	.wp-block[data-align="left"], // This is for the editor
	.wp-block[data-align="right"], // This is for the editor
	.wp-site-blocks .alignleft,
	.wp-site-blocks .alignright {
		max-width: var(--wp--custom--alignment--aligned-max-width);
	}
}

// This was added for the 'site-logo' block which centers with an 'align:center' attribute
// instead of 'textAlign' center which sets an .aligncenter class instead of a has-text-align-center
// class which would do this for us.  I'm not sure why but this centers things appropriately.
.aligncenter {
	text-align: center;
}

// Mimick the Gutenberg-generated rules of the layout container on the 404 template
.container-404 {
	max-width: var(--wp--custom--layout--content-size);
	margin-left: auto !important;
	margin-right: auto !important;
}
